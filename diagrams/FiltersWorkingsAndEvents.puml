@startuml
participant App
participant dataLoader
participant "App reducer" as reducer
participant "App state" as state
participant Filter
participant "filterReducer" as fReducer
participant "filterState" as fState

App -> state: set initial reducer state
state -> App: initial data
state -> Filter: filtersSettings
state -> Filter: filters[accessor] - filter state
Filter -> fState: set state
dataLoader <- state: filters value
dataLoader -> state: data from server
state -> App: loaded data

== Filter event: change type of filter ==
Filter -> App: onSaveSettings(accessor, newType)
App -> reducer: SET_FILTER_TYPE(accessor, newType)
reducer ->state: **filtersSettings[accessor]** - set new type
reducer -> state: **filters[accessor]** - set new type
reducer --> state: **filters[accessor]** - clear value
group Only if previous filters[accessor] value was not empty
    reducer -> state: **filters[another accessors]** - set **didInvalidate** if it need
    note right
            for all filters with preloaded
            lists of values
    end note
    reducer --> state: **state** - set **didInvalidate**
    dataLoader <-- state: filters value
    dataLoader --> state: data from server
    state --> App: loaded data
end

== Filter event: set value of filter ==
Filter -> App: onChangeFilter({accessor, value, append: false, remove: false)}
App -> reducer: SET_FILTER_VALUE(accessor, value)
reducer -> state: **filters[accessor]** - set value as [value]
reducer -> state: **filters[another accessors]** - set **didInvalidate**
    note right
        set didInvalidate
        only if need reload list values
        for current filter
    end note
reducer --> state: **state** - set **didInvalidate**
dataLoader <-- state: filters value
dataLoader --> state: data from server
state --> App: loaded data

== Filter event: append value to filter ==
Filter -> App: onChangeFilter({accessor, value, append: true, remove: false)}
reducer -> state: **filters[accessor]** - add value to array of values
reducer -> state: **filters[another accessors]** - set **didInvalidate**
    note right
        set didInvalidate
        only if need reload list values
        for current filter
    end note
reducer --> state: **state** - set **didInvalidate**
dataLoader <-- state: filters value
dataLoader --> state: data from server
state --> App: loaded data

== Filter event: remove filter's value ==
Filter -> App: onChangeFilter({accessor, value, append: false, remove: true)}
reducer -> state: **filters[accessor]** - remove value from array of values
reducer -> state: **filters[another accessors]** - set **didInvalidate**
    note right
        set didInvalidate
        only if need reload list values
        for current filter
    end note
reducer --> state: **state** - set **didInvalidate**
dataLoader <-- state: filters value
dataLoader --> state: data from server
state --> App: loaded data

==Filter type LIST: click on item==
Filter -> fReducer: CLICK_ON_ITEM(value)
fReducer -> fState: add/remove value to/from **checkedItems[]**
    note right
        if in **checkedItems[]** - remove
        else - append
    end note
fReducer -> fState: set checkbox for this item in list
fReducer -> fState: **checkedItemsCounter** = amount of selected items in list
Filter <- fState: render new state

==Filter type LIST: click on selectAll checkbox==
Filter -> fReducer: CLICK_ON_SELECT_ALL
fReducer -> fState: **selectAll** = !selectAll
fReducer -> fState: select all items in list
fReducer -> fState: **checkedItems** = []
fReducer -> fState: **checkedItemsCounter** = 0 or length of list
    note right
        depends on new state of selectAll
        if selectAll is **true** - select all items
        else - unselect all in list
    end note
Filter <- fState: render new state
@enduml